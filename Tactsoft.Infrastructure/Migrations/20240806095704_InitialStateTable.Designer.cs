// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tactsoft.Infrastructure.Persistence;

#nullable disable

namespace Tactsoft.Infrastructure.Migrations
{
    [DbContext(typeof(TactsoftDbContext))]
    [Migration("20240806095704_InitialStateTable")]
    partial class InitialStateTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CapitalCity")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<int>("UpdateNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CapitalCity = "Washington, D.C.",
                            Code = "US",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 139, DateTimeKind.Unspecified).AddTicks(7201), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 139, DateTimeKind.Unspecified).AddTicks(7217), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "United States",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 2L,
                            CapitalCity = "Ottawa",
                            Code = "CA",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 139, DateTimeKind.Unspecified).AddTicks(7221), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 139, DateTimeKind.Unspecified).AddTicks(7222), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Canada",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 3L,
                            CapitalCity = "London",
                            Code = "GB",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 139, DateTimeKind.Unspecified).AddTicks(7225), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 139, DateTimeKind.Unspecified).AddTicks(7226), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "United Kingdom",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 4L,
                            CapitalCity = "Canberra",
                            Code = "AU",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 139, DateTimeKind.Unspecified).AddTicks(7228), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 139, DateTimeKind.Unspecified).AddTicks(7229), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Australia",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 5L,
                            CapitalCity = "Berlin",
                            Code = "DE",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 139, DateTimeKind.Unspecified).AddTicks(7231), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 139, DateTimeKind.Unspecified).AddTicks(7232), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Germany",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 6L,
                            CapitalCity = "Paris",
                            Code = "FR",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 139, DateTimeKind.Unspecified).AddTicks(7234), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 139, DateTimeKind.Unspecified).AddTicks(7235), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "France",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 7L,
                            CapitalCity = "Tokyo",
                            Code = "JP",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 139, DateTimeKind.Unspecified).AddTicks(7237), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 139, DateTimeKind.Unspecified).AddTicks(7238), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Japan",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 8L,
                            CapitalCity = "Beijing",
                            Code = "CN",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 139, DateTimeKind.Unspecified).AddTicks(7269), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 139, DateTimeKind.Unspecified).AddTicks(7269), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "China",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 9L,
                            CapitalCity = "New Delhi",
                            Code = "IN",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 139, DateTimeKind.Unspecified).AddTicks(7272), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 139, DateTimeKind.Unspecified).AddTicks(7273), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "India",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 10L,
                            CapitalCity = "Brasília",
                            Code = "BR",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 139, DateTimeKind.Unspecified).AddTicks(7275), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 139, DateTimeKind.Unspecified).AddTicks(7276), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Brazil",
                            UpdateNo = 0
                        });
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+UserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("Name")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<int>("UpdateNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("State", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryId = 1L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2876), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2882), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "California",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 2L,
                            CountryId = 1L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2885), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2886), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Texas",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 3L,
                            CountryId = 1L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2888), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2889), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "New York",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 4L,
                            CountryId = 1L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2891), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2891), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Florida",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 5L,
                            CountryId = 1L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2893), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2894), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Illinois",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 6L,
                            CountryId = 2L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2896), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2897), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Ontario",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 7L,
                            CountryId = 2L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2899), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2900), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Quebec",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 8L,
                            CountryId = 2L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2902), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2902), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "British Columbia",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 9L,
                            CountryId = 2L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2904), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2905), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Alberta",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 10L,
                            CountryId = 2L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2907), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2908), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Manitoba",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 11L,
                            CountryId = 3L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2909), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2910), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "England",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 12L,
                            CountryId = 3L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2912), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2913), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Scotland",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 13L,
                            CountryId = 3L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2915), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2915), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Wales",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 14L,
                            CountryId = 3L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2948), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2948), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Northern Ireland",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 15L,
                            CountryId = 3L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2951), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2951), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Cornwall",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 16L,
                            CountryId = 4L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2953), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2954), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "New South Wales",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 17L,
                            CountryId = 4L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2956), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2957), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Victoria",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 18L,
                            CountryId = 4L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2958), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2959), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Queensland",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 19L,
                            CountryId = 4L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2961), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2962), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Western Australia",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 20L,
                            CountryId = 4L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2964), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2966), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "South Australia",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 21L,
                            CountryId = 5L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2967), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2968), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Bavaria",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 22L,
                            CountryId = 5L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2970), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2971), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Baden-Württemberg",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 23L,
                            CountryId = 5L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2972), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2973), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "North Rhine-Westphalia",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 24L,
                            CountryId = 5L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2975), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2976), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hesse",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 25L,
                            CountryId = 5L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2978), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2978), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Saxony",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 26L,
                            CountryId = 6L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2980), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2981), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Île-de-France",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 27L,
                            CountryId = 6L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2983), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2984), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Provence-Alpes-Côte d'Azur",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 28L,
                            CountryId = 6L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2985), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2986), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Auvergne-Rhône-Alpes",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 29L,
                            CountryId = 6L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2988), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2988), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Nouvelle-Aquitaine",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 30L,
                            CountryId = 6L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2990), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2991), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Occitanie",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 31L,
                            CountryId = 7L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2994), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2994), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Tokyo",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 32L,
                            CountryId = 7L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2996), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2997), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Osaka",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 33L,
                            CountryId = 7L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2998), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(2999), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hokkaido",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 34L,
                            CountryId = 7L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3001), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3001), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Fukuoka",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 35L,
                            CountryId = 7L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3003), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3004), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Aichi",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 36L,
                            CountryId = 8L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3006), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3006), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Beijing",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 37L,
                            CountryId = 8L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3008), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3009), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Shanghai",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 38L,
                            CountryId = 8L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3010), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3011), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Guangdong",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 39L,
                            CountryId = 8L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3013), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3013), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Sichuan",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 40L,
                            CountryId = 8L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3015), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3016), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Zhejiang",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 41L,
                            CountryId = 9L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3018), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3018), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Maharashtra",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 42L,
                            CountryId = 9L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3021), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3021), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Karnataka",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 43L,
                            CountryId = 9L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3023), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3024), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Tamil Nadu",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 44L,
                            CountryId = 9L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3026), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3026), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Uttar Pradesh",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 45L,
                            CountryId = 9L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3028), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3029), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Gujarat",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 46L,
                            CountryId = 10L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3031), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3031), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "São Paulo",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 47L,
                            CountryId = 10L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3033), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3034), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Rio de Janeiro",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 48L,
                            CountryId = 10L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3035), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3036), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Minas Gerais",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 49L,
                            CountryId = 10L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3038), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3038), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Bahia",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 50L,
                            CountryId = 10L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3040), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 57, 3, 141, DateTimeKind.Unspecified).AddTicks(3041), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Paraná",
                            UpdateNo = 0
                        });
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+RoleClaim", b =>
                {
                    b.HasOne("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+UserClaim", b =>
                {
                    b.HasOne("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+UserLogin", b =>
                {
                    b.HasOne("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+UserRole", b =>
                {
                    b.HasOne("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+UserToken", b =>
                {
                    b.HasOne("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.State", b =>
                {
                    b.HasOne("Tactsoft.SharedKernel.Entities.Country", "Country")
                        .WithMany("State")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Country", b =>
                {
                    b.Navigation("State");
                });
#pragma warning restore 612, 618
        }
    }
}
