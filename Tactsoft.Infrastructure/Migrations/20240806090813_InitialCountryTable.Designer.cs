// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tactsoft.Infrastructure.Persistence;

#nullable disable

namespace Tactsoft.Infrastructure.Migrations
{
    [DbContext(typeof(TactsoftDbContext))]
    [Migration("20240806090813_InitialCountryTable")]
    partial class InitialCountryTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CapitalCity")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<int>("UpdateNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CapitalCity = "Washington, D.C.",
                            Code = "US",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 8, 10, 178, DateTimeKind.Unspecified).AddTicks(4360), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 8, 10, 178, DateTimeKind.Unspecified).AddTicks(4377), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "United States",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 2L,
                            CapitalCity = "Ottawa",
                            Code = "CA",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 8, 10, 178, DateTimeKind.Unspecified).AddTicks(4383), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 8, 10, 178, DateTimeKind.Unspecified).AddTicks(4384), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Canada",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 3L,
                            CapitalCity = "London",
                            Code = "GB",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 8, 10, 178, DateTimeKind.Unspecified).AddTicks(4386), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 8, 10, 178, DateTimeKind.Unspecified).AddTicks(4387), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "United Kingdom",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 4L,
                            CapitalCity = "Canberra",
                            Code = "AU",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 8, 10, 178, DateTimeKind.Unspecified).AddTicks(4390), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 8, 10, 178, DateTimeKind.Unspecified).AddTicks(4391), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Australia",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 5L,
                            CapitalCity = "Berlin",
                            Code = "DE",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 8, 10, 178, DateTimeKind.Unspecified).AddTicks(4393), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 8, 10, 178, DateTimeKind.Unspecified).AddTicks(4394), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Germany",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 6L,
                            CapitalCity = "Paris",
                            Code = "FR",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 8, 10, 178, DateTimeKind.Unspecified).AddTicks(4397), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 8, 10, 178, DateTimeKind.Unspecified).AddTicks(4398), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "France",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 7L,
                            CapitalCity = "Tokyo",
                            Code = "JP",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 8, 10, 178, DateTimeKind.Unspecified).AddTicks(4400), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 8, 10, 178, DateTimeKind.Unspecified).AddTicks(4401), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Japan",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 8L,
                            CapitalCity = "Beijing",
                            Code = "CN",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 8, 10, 178, DateTimeKind.Unspecified).AddTicks(4404), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 8, 10, 178, DateTimeKind.Unspecified).AddTicks(4405), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "China",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 9L,
                            CapitalCity = "New Delhi",
                            Code = "IN",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 8, 10, 178, DateTimeKind.Unspecified).AddTicks(4407), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 8, 10, 178, DateTimeKind.Unspecified).AddTicks(4408), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "India",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 10L,
                            CapitalCity = "Brasília",
                            Code = "BR",
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 8, 10, 178, DateTimeKind.Unspecified).AddTicks(4411), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDelete = false,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 8, 6, 9, 8, 10, 178, DateTimeKind.Unspecified).AddTicks(4412), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Brazil",
                            UpdateNo = 0
                        });
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+UserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("Name")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+RoleClaim", b =>
                {
                    b.HasOne("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+UserClaim", b =>
                {
                    b.HasOne("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+UserLogin", b =>
                {
                    b.HasOne("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+UserRole", b =>
                {
                    b.HasOne("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+UserToken", b =>
                {
                    b.HasOne("Tactsoft.SharedKernel.Entities.Identities.IdentityModel+User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
